import type { IAuthOptions, IAuthResult } from '.';
import type { AxiosInstance, AxiosResponse } from 'axios';

export interface IAuthData<IUser> {
  user: IUser | null;
  accessToken: string | null;
  refreshToken: string | null;
  isSignedIn: boolean;
}
export type AuthCallback<IUser, ISignInParams> = (
  auth: IAuthManager<IUser, ISignInParams>,
) => void | Promise<void>;
export type AuthResponseCallback<IData = unknown, IConfigData = unknown> = (
  response: AxiosResponse<IData, IConfigData>,
) => void | Promise<void>;
export type AuthCallbackUnsubscriber = () => void;

export default interface IAuthManager<IUser, ISignInParams> {
  /**
   * Instance of axios you should use to perform authorized requests
   */
  axios: AxiosInstance;
  options: Readonly<Required<IAuthOptions<IUser, ISignInParams>>>;
  /**
   * @returns `IUser` model if the user is logged in or `null` otherwise.
   */
  getUser(): IUser | null;
  /**
   * @returns `accessToken` if the user is logged in or `null` otherwise.
   */
  getAccessToken(): string | null;
  /**
   * @returns `refreshToken` if the user is logged in or `null` otherwise.
   */
  getRefreshToken(): string | null;
  /**
   * @returns formatted http header value generated by `options.buildAuthorizationHeader`.
   */
  getAuthorizationHeader(): string | null;

  /**
   * @returns combined data from `getUser`, `getAccessToken`, `getRefreshToken`, `isSignedIn` methods
   */
  getAuthData(): IAuthData<IUser>;

  /**
   *
   * @param user User
   * @param authResult accessToken & refreshToken
   * @emits `AuthEventNames.onAuthStateChanged` & `AuthEventNames.onSignedIn` events
   *
   * @description This method will save the authentication token
   * and the user information in the storage.
   */
  setAuth(user: IUser, authResult: IAuthResult): this;

  /**
   *
   * @param user set of fields for the `IUser` model to be updated.
   * @emits `AuthEventNames.onAuthStateChanged` event
   *
   * @description Updates the user data in the storage. **Do not** perform API
   * request to update user on the Backend.
   */
  updateUser(user: Partial<IUser>): this;

  /**
   * @returns `true` if the user is signed in.
   */
  isSignedIn(): boolean;

  /**
   *
   * @param signInParams user credentials required for the `options.signIn` request
   *
   * @description This method will call the `signIn` method from `IAuthOptions`
   * and then save the authentication token and get the user information.
   * All received data is stored in the storage.
   */
  signIn(signInParams: ISignInParams): Promise<this>;

  /**
   * @description This method will call the `signOut` method from `IAuthOptions`
   * and then clear the authentication token and all user information
   */
  signOut(): Promise<this>;

  /**
   *
   * @param refreshToken The `refreshToken` string. This parameter is optional,
   * the result of `authManager.getRefreshToken()` is used as default parameter.
   *
   * @emits `AuthEventNames.onAuthStateChanged` & `AuthEventNames.onTokenRefreshed` events
   */
  refreshToken(token?: string): Promise<this>;

  /**
   * @returns true if dispose method was called on this instance.
   */
  isDisposed(): boolean;

  /**
   * @description Removes all active event listeners on this object.
   * Remove response interceptor that refreshes token from axios instance.
   * Instance should not be used after disposing!
   */
  dispose(): void;

  onSignedIn(callback: AuthCallback<IUser, ISignInParams>): AuthCallbackUnsubscriber;
  onSignedOut(callback: AuthCallback<IUser, ISignInParams>): AuthCallbackUnsubscriber;
  onTokenRefreshed(callback: AuthCallback<IUser, ISignInParams>): AuthCallbackUnsubscriber;
  onStateChanged(callback: AuthCallback<IUser, ISignInParams>): AuthCallbackUnsubscriber;
  onSignInFailed<IData = unknown, IConfigData = unknown>(
    callback: AuthResponseCallback<IData, IConfigData>,
  ): AuthCallbackUnsubscriber;
}
